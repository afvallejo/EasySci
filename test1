# Cell 6: Run the pipeline based on sequencing_type
if sequencing_type == "paired-end":
    # Barcode the reads
    print("Barcoding reads...")
    script = os.path.join(script_folder, 'barcoding_reads_paired.py')
    os.makedirs(os.path.join(output_folder, 'barcoded_fastqs'), exist_ok=True)
    subprocess.run(['python', script, fastq_folder, sample_ID, os.path.join(output_folder, 'barcoded_fastqs'), ligation_barcode_file, RT_barcode_file, str(cores), randomN_barcode_file])
    print("Done barcoding reads")

    # Trim the reads
    print("Start trimming...")
    os.makedirs(os.path.join(output_folder, 'trimmed_fastqs'), exist_ok=True)

    def trim(sample):
        print(f"Trimming sample: {sample}")
        r1_files = [f for f in os.listdir(os.path.join(output_folder, 'barcoded_fastqs')) if sample in f and 'R1' in f and f.endswith('.gz')]
        r2_files = [f for f in os.listdir(os.path.join(output_folder, 'barcoded_fastqs')) if sample in f and 'R2' in f and f.endswith('.gz')]
        if r1_files and r2_files:
            r1 = r1_files[0]
            r2 = r2_files[0]
            subprocess.run(['trim_galore', '--paired', os.path.join(output_folder, 'barcoded_fastqs', r1), os.path.join(output_folder, 'barcoded_fastqs', r2), '-a2', 'AAAAAAAA', '--stringency', '3', '-o', os.path.join(output_folder, 'trimmed_fastqs')])

    with Pool(cores) as p:
        p.map(trim, samples)
    print("Done trimming...")
    print()

    # STAR alignment
    print("Start alignment using STAR...")
    os.makedirs(os.path.join(output_folder, 'STAR_alignment'), exist_ok=True)
    # Clear any STAR genome that might still be loaded from previous runs.
    # STAR exits with an error if no genome is loaded, so check before calling.
    star_tmp = f"/dev/shm/STARtmp-{os.path.basename(index.rstrip('/'))}"
    if os.path.exists(star_tmp):
        subprocess.run(['STAR', '--genomeDir', index, '--genomeLoad', 'Remove'])

    for sample in samples:
        print(f"Aligning {sample}...")
        trimmed_dir = os.path.join(output_folder, 'trimmed_fastqs')
        r1_files = [f for f in os.listdir(trimmed_dir) if sample in f and 'R1' in f and f.endswith('.gz')]
        r2_files = [f for f in os.listdir(trimmed_dir) if sample in f and 'R2' in f and f.endswith('.gz')]
        if r1_files and r2_files:
            r1 = r1_files[0]
            r2 = r2_files[0]
            subprocess.run(['STAR', '--runThreadN', str(cores), '--outSAMstrandField', 'intronMotif', '--genomeDir', index, '--readFilesCommand', 'zcat', '--readFilesIn', os.path.join(trimmed_dir, r1), os.path.join(trimmed_dir, r2), '--outFileNamePrefix', os.path.join(output_folder, 'STAR_alignment/', sample + '_'), '--genomeLoad', 'LoadAndKeep'])

    # Clear previous STAR genome only if it is present in shared memory.
    star_tmp = f"/dev/shm/STARtmp-{os.path.basename(index.rstrip('/'))}"
    if os.path.exists(star_tmp):
        subprocess.run(['STAR', '--genomeDir', index, '--genomeLoad', 'Remove'])
    print("Done aligning")
    print()

    # Transfer STAR log files
    os.makedirs(os.path.join(output_folder, 'report/Log_files'), exist_ok=True)
    log_files = ['Log.out', 'Log.progress.out', 'Aligned.out.sam', 'SJ.out.tab', 'Log.final.out']
    for log_file in log_files:
        if os.path.exists(log_file):
            shutil.move(log_file, os.path.join(output_folder, 'report/Log_files', log_file))

    # Sorting and filtering SAM files
    print("Start sorting and filtering...")
    os.makedirs(os.path.join(output_folder, 'filtered_sam'), exist_ok=True)

    def sort_filter(sample):
        print(f"Sorting and filtering {sample}")
        sam_file = os.path.join(output_folder, 'STAR_alignment', f'{sample}_Aligned.out.sam')
        noheader = os.path.join(output_folder, 'filtered_sam', f'{sample}.noheader.sam')
        header = os.path.join(output_folder, 'filtered_sam', f'{sample}.header.sam')
        final_sam = os.path.join(output_folder, 'filtered_sam', f'{sample}.sam')

        cmd = f"samtools view -q 30 -f 2 -F 780 {sam_file} | sort -k1,1 -k3,3 -k4,4n > {noheader}"
        os.system(cmd)

        os.system(f"grep '@' {sam_file} > {header}")

        os.system(f"cat {header} {noheader} > {final_sam}")

        os.remove(header)
        os.remove(noheader)
        print(f"Filtering {sample} done.")

    with Pool(cores) as p:
        p.map(sort_filter, samples)
    print("Done sorting and filtering")
    print()

    # Removing duplicates
    print("Start removing duplicates...")
    os.makedirs(os.path.join(output_folder, 'duplicates_removed'), exist_ok=True)
    script = os.path.join(script_folder, 'duplicate_removal_paired.py')
    subprocess.run(['python', script, os.path.join(output_folder, 'filtered_sam/'), sample_ID, os.path.join(output_folder, 'duplicates_removed/'), str(cores)])
    print("Done removing duplicates.")
    print()

    # Calculate read numbers along the pipeline
    print("Start calculating the reads number along the pipeline...")
    os.makedirs(os.path.join(output_folder, 'report/read_num'), exist_ok=True)
    read_num_file = os.path.join(output_folder, 'report/read_num/read_number.csv')
    with open(read_num_file, 'w') as f:
        f.write("sample,total reads,after filtering barcode,after trimming,uniquely aligned reads,After remove duplicates\n")

    def count_fastq(file_path):
        if os.path.exists(file_path):
            with gzip.open(file_path, 'rt') as f:
                return sum(1 for _ in f) // 4
        return 0

    def count_sam_pairs(file_path):
        if os.path.exists(file_path):
            result = subprocess.run(['samtools', 'view', file_path], stdout=subprocess.PIPE, text=True)
            return len(result.stdout.splitlines()) // 2
        return 0

    for sample in samples:
        print(f"calculating {sample}")
        total_reads_file = os.path.join(fastq_folder, f'{sample}.R2.fastq.gz')
        after_barcode_file = os.path.join(output_folder, 'barcoded_fastqs', f'{sample}.R2.fastq.gz')  # Assuming name unchanged
        after_trim_file = os.path.join(output_folder, 'trimmed_fastqs', f'{sample}.R2_val_2.fq.gz')
        filtered_sam = os.path.join(output_folder, 'filtered_sam', f'{sample}.sam')
        dedup_sam = os.path.join(output_folder, 'duplicates_removed', f'{sample}.sam')

        total_reads = count_fastq(total_reads_file)
        after_barcode = count_fastq(after_barcode_file)
        after_trim = count_fastq(after_trim_file)
        uniquely_aligned = count_sam_pairs(filtered_sam)
        after_dedup = count_sam_pairs(dedup_sam)

        with open(read_num_file, 'a') as f:
            f.write(f"{sample},{total_reads},{after_barcode},{after_trim},{uniquely_aligned},{after_dedup}\n")
    print("Read number calculation is done.")
    print()

    # Count the genes
    print("Start the gene count....")
    os.makedirs(os.path.join(output_folder, 'report/Gene_count/'), exist_ok=True)
    script = os.path.join(script_folder, 'gene_counting_paired.py')
    subprocess.run(['python', script, gtf_file, os.path.join(output_folder, 'duplicates_removed/'), os.path.join(output_folder, 'report/Gene_count/'), sample_ID, str(cores), randomN_barcode_file])
    print("Gene count done")
    print()

    # Post processing genes
    print("Start the gene post processing....")
    script = os.path.join(script_folder, 'post_processing_genes.py')
    os.makedirs(os.path.join(output_folder, 'report/out/genes/'), exist_ok=True)
    subprocess.run(['python', script, os.path.join(output_folder, 'report/Gene_count/'), os.path.join(output_folder, 'report/out/genes/'), sample_ID, RT_barcode_matching_file])
    print("Done with the gene post processing")
    print()

    # Count the exons
    print("Start the exon count....")
    os.makedirs(os.path.join(output_folder, 'report/Exon_count/'), exist_ok=True)
    script = os.path.join(script_folder, 'exon_counting_paired.py')
    subprocess.run(['python', script, gtf_file_exons, os.path.join(output_folder, 'duplicates_removed/'), os.path.join(output_folder, 'report/Exon_count/'), sample_ID, str(cores)])
    print("Exon count done")
    print()

    # Post processing exons
    print("Start the exon post processing....")
    script = os.path.join(script_folder, 'post_processing_exons.py')
    os.makedirs(os.path.join(output_folder, 'report/out/exons/'), exist_ok=True)
    subprocess.run(['python', script, os.path.join(output_folder, 'report/Exon_count/'), os.path.join(output_folder, 'report/out/exons/'), sample_ID, RT_barcode_matching_file, sequencing_type])
    print("Done with the exon post processing")
    print()

else:  # single-end
    # Barcode the reads
    print("Barcoding reads...")
    script = os.path.join(script_folder, 'barcoding_reads_single.py')
    os.makedirs(os.path.join(output_folder, 'barcoded_fastqs'), exist_ok=True)
    subprocess.run(['python', script, fastq_folder, sample_ID, os.path.join(output_folder, 'barcoded_fastqs'), ligation_barcode_file, RT_barcode_file, str(cores)])
    print("Done barcoding reads")

    # Trim the reads
    print("Start trimming...")
    os.makedirs(os.path.join(output_folder, 'trimmed_fastqs'), exist_ok=True)

    def trim(sample):
        print(f"Trimming sample: {sample}")
        r2_files = [f for f in os.listdir(os.path.join(output_folder, 'barcoded_fastqs')) if sample in f and 'R2' in f and f.endswith('.gz')]
        if r2_files:
            r2 = r2_files[0]
            subprocess.run(['trim_galore', os.path.join(output_folder, 'barcoded_fastqs', r2), '-a', 'AAAAAAAA', '--stringency', '3', '--three_prime_clip_R1', '1', '-o', os.path.join(output_folder, 'trimmed_fastqs')])

    with Pool(cores) as p:
        p.map(trim, samples)
    print("Done trimming...")
    print()

    # STAR alignment
    print("Start alignment using STAR...")
    os.makedirs(os.path.join(output_folder, 'STAR_alignment'), exist_ok=True)
    # Clear any STAR genome left from a previous run before alignment.
    star_tmp = f"/dev/shm/STARtmp-{os.path.basename(index.rstrip('/'))}"
    if os.path.exists(star_tmp):
        subprocess.run(['STAR', '--genomeDir', index, '--genomeLoad', 'Remove'])

    for sample in samples:
        print(f"Aligning {sample}...")
        trimmed_dir = os.path.join(output_folder, 'trimmed_fastqs')
        r2_files = [f for f in os.listdir(trimmed_dir) if sample in f and 'R2' in f and f.endswith('.gz')]
        if r2_files:
            r2 = r2_files[0]
            subprocess.run(['STAR', '--runThreadN', str(cores), '--outSAMstrandField', 'intronMotif', '--genomeDir', index, '--readFilesCommand', 'zcat', '--readFilesIn', os.path.join(trimmed_dir, r2), '--outFileNamePrefix', os.path.join(output_folder, 'STAR_alignment/', sample + '_'), '--genomeLoad', 'LoadAndKeep'])

    # Remove STAR genome from shared memory when alignment is done.
    star_tmp = f"/dev/shm/STARtmp-{os.path.basename(index.rstrip('/'))}"
    if os.path.exists(star_tmp):
        subprocess.run(['STAR', '--genomeDir', index, '--genomeLoad', 'Remove'])
    print("Done aligning")
    print()

    # Transfer STAR log files
    os.makedirs(os.path.join(output_folder, 'report/Log_files'), exist_ok=True)
    log_files = ['Log.out', 'Log.progress.out', 'Aligned.out.sam', 'SJ.out.tab', 'Log.final.out']
    for log_file in log_files:
        if os.path.exists(log_file):
            shutil.move(log_file, os.path.join(output_folder, 'report/Log_files', log_file))

    # Sorting and filtering SAM files
    print("Start sorting and filtering...")
    os.makedirs(os.path.join(output_folder, 'filtered_sam'), exist_ok=True)

    def sort_filter(sample):
        print(f"Sorting and filtering {sample}")
        sam_file = os.path.join(output_folder, 'STAR_alignment', f'{sample}_Aligned.out.sam')
        noheader = os.path.join(output_folder, 'filtered_sam', f'{sample}.noheader.sam')
        header = os.path.join(output_folder, 'filtered_sam', f'{sample}.header.sam')
        final_sam = os.path.join(output_folder, 'filtered_sam', f'{sample}.sam')

        cmd = f"samtools view -q 30 -F 772 {sam_file} | sort -k1,1 -k3,3 -k4,4n > {noheader}"
        os.system(cmd)

        os.system(f"grep '@' {sam_file} > {header}")

        os.system(f"cat {header} {noheader} > {final_sam}")

        os.remove(header)
        os.remove(noheader)
        print(f"Filtering {sample} done.")

    with Pool(cores) as p:
        p.map(sort_filter, samples)
    print("Done sorting and filtering")
    print()

    # Removing duplicates
    print("Start removing duplicates...")
    os.makedirs(os.path.join(output_folder, 'duplicates_removed'), exist_ok=True)
    script = os.path.join(script_folder, 'duplicate_removal_single.py')
    subprocess.run(['python', script, os.path.join(output_folder, 'filtered_sam/'), sample_ID, os.path.join(output_folder, 'duplicates_removed/'), str(cores)])
    print("Done removing duplicates.")
    print()

    # Calculate read numbers along the pipeline
    print("Start calculating the reads number along the pipeline...")
    os.makedirs(os.path.join(output_folder, 'report/read_num'), exist_ok=True)
    read_num_file = os.path.join(output_folder, 'report/read_num/read_number.csv')
    with open(read_num_file, 'w') as f:
        f.write("sample,total reads,after filtering barcode,after trimming,uniquely aligned reads,After remove duplicates\n")

    def count_sam(file_path):
        if os.path.exists(file_path):
            result = subprocess.run(['samtools', 'view', file_path], stdout=subprocess.PIPE, text=True)
            return len(result.stdout.splitlines())
        return 0

    for sample in samples:
        print(f"calculating {sample}")
        total_reads_file = os.path.join(fastq_folder, f'{sample}.R2.fastq.gz')
        after_barcode_file = os.path.join(output_folder, 'barcoded_fastqs', f'{sample}.R2.fastq.gz')
        after_trim_file = os.path.join(output_folder, 'trimmed_fastqs', f'{sample}.R2_trimmed.fq.gz')
        filtered_sam = os.path.join(output_folder, 'filtered_sam', f'{sample}.sam')
        dedup_sam = os.path.join(output_folder, 'duplicates_removed', f'{sample}.sam')

        total_reads = count_fastq(total_reads_file)
        after_barcode = count_fastq(after_barcode_file)
        after_trim = count_fastq(after_trim_file)
        uniquely_aligned = count_sam(filtered_sam)
        after_dedup = count_sam(dedup_sam)

        with open(read_num_file, 'a') as f:
            f.write(f"{sample},{total_reads},{after_barcode},{after_trim},{uniquely_aligned},{after_dedup}\n")
    print("Read number calculation is done.")
    print()

    # Count the genes
    print("Start the gene count....")
    os.makedirs(os.path.join(output_folder, 'report/Gene_count/'), exist_ok=True)
    script = os.path.join(script_folder, 'gene_counting_single.py')
    subprocess.run(['python', script, gtf_file, os.path.join(output_folder, 'duplicates_removed/'), os.path.join(output_folder, 'report/Gene_count/'), sample_ID, str(cores), randomN_barcode_file])
    print("Gene count done")
    print()

    # Post processing genes
    print("Start the gene post processing....")
    script = os.path.join(script_folder, 'post_processing_genes.py')
    os.makedirs(os.path.join(output_folder, 'report/out/genes/'), exist_ok=True)
    subprocess.run(['python', script, os.path.join(output_folder, 'report/Gene_count/'), os.path.join(output_folder, 'report/out/genes/'), sample_ID, RT_barcode_matching_file])
    print("Done with the gene post processing")
    print()

    # Count the exons
    print("Start the exon count....")
    os.makedirs(os.path.join(output_folder, 'report/Exon_count/'), exist_ok=True)
    script = os.path.join(script_folder, 'exon_counting_single.py')
    subprocess.run(['python', script, gtf_file_exons, os.path.join(output_folder, 'duplicates_removed/'), os.path.join(output_folder, 'report/Exon_count/'), sample_ID, str(cores)])
    print("Exon count done")
    print()

    # Post processing exons
    print("Start the exon post processing....")
    script = os.path.join(script_folder, 'post_processing_exons.py')
    os.makedirs(os.path.join(output_folder, 'report/out/exons/'), exist_ok=True)
    subprocess.run(['python', script, os.path.join(output_folder, 'report/Exon_count/'), os.path.join(output_folder, 'report/out/exons/'), sample_ID, RT_barcode_matching_file, sequencing_type])
    print("Done with the exon post processing")
    print()
